var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = LatticeGeometry","category":"page"},{"location":"#LatticeGeometry","page":"Home","title":"LatticeGeometry","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LatticeGeometry.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [LatticeGeometry]","category":"page"},{"location":"#LatticeGeometry.AbstractionError","page":"Home","title":"LatticeGeometry.AbstractionError","text":"AbstractionError <: Exception\n\nA pretty generic catch all for abtract typing on the fly.\n\n\n\n\n\n","category":"type"},{"location":"#LatticeGeometry.UnitCell","page":"Home","title":"LatticeGeometry.UnitCell","text":"UnitCell{Natoms, Dimension, Type} <: AbstractUnitCell\n\nGeneric UnitCell structure with Natoms in a given spatial Dimension. Type signifies the numerical type used to store the positions. We use the standard convention of writing the positions in the cell coordinates, where each component of the positions must lie on [0,1].\n\n\n\n\n\n","category":"type"},{"location":"#LatticeGeometry.UnitCell-Union{Tuple{StaticArraysCore.SArray{Tuple{NA}, StaticArraysCore.SVector{D, T}, 1, NA}}, Tuple{T}, Tuple{D}, Tuple{NA}} where {NA, D, T}","page":"Home","title":"LatticeGeometry.UnitCell","text":"UnitCell([atom_names], atomic_positions)\n\nConstructor for the UnitCell. The atomic_positions must be supplied as a StaticArrays.SVector of StaticArrays.SVectors to optimize memory. The atom_names are optional, though if they are supplied then length(atom_names) == length(atomic_positions). If they are not supplied, default atom_names will be used.\n\njulia> using StaticArrays\n\njulia> positions = @SVector [ SVector(0.0, 0.0, 0.0), SVector(0.5, 0.5, 0.5) ];\n\njulia> labels = SVector( \"Fe\", \"As\" );\n\njulia> UnitCell(labels, positions)\n\n  `UnitCell` containing 2 atoms in 3 spatial dimensions.\n\n    Fe at [0.0, 0.0, 0.0]\n    As at [0.5, 0.5, 0.5]\n\njulia> UnitCell(positions; warn_on = false)\n\n  `UnitCell` containing 2 atoms in 3 spatial dimensions.\n\n    Atom_1 at [0.0, 0.0, 0.0]\n    Atom_2 at [0.5, 0.5, 0.5]\n\n\n\n\n\n","category":"method"},{"location":"#LatticeGeometry._positions_within_bounds-Tuple{Any}","page":"Home","title":"LatticeGeometry._positions_within_bounds","text":"_positions_within_bounds(positions; [interval = [0, 1]])\n\nInternal function to check that each position coordinate is on the supplied interval.\n\n\n\n\n\n","category":"method"}]
}
